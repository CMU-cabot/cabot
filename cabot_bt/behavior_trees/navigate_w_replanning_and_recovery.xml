<!--
 Copyright (c) 2018, 2021  Carnegie Mellon University, IBM Corporation, and others

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
-->

<!--
  This Behavior Tree replans the global path periodically at 1 Hz and it also has
  recovery actions.
-->

<root main_tree_to_execute="MainTree">
  <BehaviorTree ID="MainTree">
    <RestoreConfig name="Restore_footprint_publisher" node_name="/footprint_publisher">
    <RestoreConfig name="Restore_global_costmap" node_name="/global_costmap/global_costmap">
      <Sequence>
	<!-- initialize blackboard -->
	<SetBlackboard output_key="current_side" value="center"/>
	<SetBlackboard output_key="config_changed" value="false"/>

	<!-- use center for normal, 0.5 makes transition sudden, but small number cause issue
             passing close to obstacles -->
	<ChangeParam node_name="/global_costmap/global_costmap"
		     param_name="navcog_path_layer.walk_weight"
		     param_value="[0.1, 0.0, 0.1]"  name="ChangeParamToCenter"/>

	<ChangeParam node_name="/global_costmap/global_costmap"
		     param_name="navcog_path_layer.path_adjusted_center"
		     param_value="-0.5"  name="ChangeParamPathAdjustedCenter1"/>
	
	<ChangeParam node_name="/planner_server"
		     param_name="NavCog.path_adjusted_center"
		     param_value="-0.5"  name="ChangeParamPathAdjustedCenter2"/>
	
	<!-- default footprint is smallest, so change the footprint to normal -->
	<ChangeParam node_name="/footprint_publisher"
		     param_name="footprint_mode"
		     param_value="0"  name="ChangeParamToNormal"/>

	<!-- compute a path -->
	<RecoveryNode number_of_retries="999999999" name="InitialComputePathRepeat">
	  <Sequence name="ComputePathSequence">
	    <!-- clear costmap -->
	    <ClearEntireCostmap name="ClearGlobalCostmap-context" server_timeout="5000"
				service_name="/global_costmap/clear_entirely_global_costmap"/>
	    
	    <!-- wait long enough to include neighbor obstacles -->
	    <WaitFloat wait_duration_float="1.0"/>
	    <CurrentPose global_frame="map" robot_base_frame="base_footprint" pose="{current_pose}" />
	    <ComputePathToPose start="{current_pose}" goal="{goal}" path="{navcog_path}" planner_id="NavCog"/>
	    <PathToPoses path="{navcog_path}" goals="{navcog_goals}" />
	    <PublishTopicPath topic="path_out" value="{navcog_path}"/> <!-- for debug -->
	    <ComputePathThroughPoses goals="{navcog_goals}" path="{path}" planner_id="GridBased"/>
	    <!-- do not remove this plan topic, this is used by ROS1 node -->
	    <PublishTopicPath topic="plan" value="{path}"/>
	    <!-- front vibration -->
	    <PublishTopic topic="/cabot/event" value="navigation;event;navigation_start" />
	  </Sequence>
	  <ForceSuccess>
	    <WaitFloat wait_duration_float="0.5"/>
	  </ForceSuccess>
	</RecoveryNode>

	<!-- main loop -->
	<RecoveryNode number_of_retries="999999999" name="NavigateRecovery">
	  <!-- navigation -->
	  <PipelineSequence name="NavigateWithReplanning">

	    <!-- Check people status frequently -->
	    <RateController hz="2" name="AvoidPeople">
              <Fallback name="AvoidPersonFallback">
		<Sequence>
		  <CurrentPose global_frame="map" robot_base_frame="base_footprint" pose="{current_pose}" />
		  <PathToPoses path="{path}" goals="{col_goals}" start="{current_pose}" range="7.0" restpath="{restpath}" goal_original="{goal}" goal_chosen="{goal_temp}"/>
		  <Inverter>
		    <ComputePathThroughPoses goals="{col_goals}" path="{path_conf}" planner_id="CheckCollision"/>
		  </Inverter>
		  <CurrentPose global_frame="map" robot_base_frame="base_footprint" pose="{current_pose}" />
		  <ComputePathToPose start="{current_pose}" goal="{goal_temp}" path="{navcog_path}" planner_id="NavCog"/>
		  <PathToPoses path="{navcog_path}" goals="{navcog_goals}" start="{current_pose}"/>
		  <ComputePathThroughPoses goals="{navcog_goals}" path="{path_temp}" start="{current_pose}" planner_id="GridBased"/>
		  <CheckPath current="{path}" path="{path_temp}" path2="{restpath}" path_topic="/path" plan_topic="/plan" path_out="{path}" />
		  <!-- do not remove this plan topic, this is used by ROS1 node -->
		  <PublishTopicPath topic="plan" value="{path}"/>
		  <!-- need to know what the robot is going to avoid -->
		  <PublishTopic topic="/cabot/event" value="navigation:event;bt_navigator_avoid_something"/>
		</Sequence>
		<AlwaysSuccess/>
	      </Fallback>
	    </RateController>>

	    <!-- follow path -->
	    <ReactiveFallback>
	      <!-- if the goal is updated, abort following first, this will be recorvered by RecoveryComputePathRepeat -->
	      <GoalUpdated/>
	      <FollowPath path="{path}" controller_id="FollowPath" goal_checker_id="cabot_goal_checker"/>
	    </ReactiveFallback>
	  </PipelineSequence>

	  <!-- if follow path is aborted, compute path and try again -->
	  <RecoveryNode number_of_retries="999999999" name="RecoveryComputePathRepeat">
	    <Sequence name="ComputePathSequence">
	      <!-- clear costmap -->
	      <ClearCostmapAroundRobot name="ClearGlobalCostmapAroundRobot2" server_timeout="5000"
				       service_name="global_costmap/clear_around_global_costmap"
				       reset_distance="20" />
	      <ClearCostmapAroundRobot name="ClearLocalCostmapAroundRobot" server_timeout="5000"
				       service_name="local_costmap/clear_around_local_costmap"
				       reset_distance="20" />
	      
	      <!-- wait long enough to include neighbor obstacles -->
	      <Wait wait_duration="1.0"/>
	      <!-- do not reroute 
	      <ComputePathToPose goal="{goal}" path="{path}" planner_id="GridBased"/>
	      <CheckPath  path="{path_temp}" path_topic="/path" plan_topic="/plan" path_out="{path}" />
	      -->
	    </Sequence>
	    <AlwaysSuccess/>
	  </RecoveryNode>
	</RecoveryNode>
      </Sequence>
    </RestoreConfig>
    </RestoreConfig>
  </BehaviorTree>
</root>
