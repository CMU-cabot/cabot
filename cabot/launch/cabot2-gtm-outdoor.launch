<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2020  Carnegie Mellon University
 
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
 
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
 
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. -->

<launch>
  <!--
      Launch file for CaBot2-gtm-outdoor
      Development history:
      CaBot2-e1 is deprecated because of motor precision issue (might be because
      of no-encoder, no-PID adjustment, and cheep motors)
      CaBot2-e2 changed motors and add encoders and adjusted PID params
  -->
  <!-- EXTERNAL VARIABLES -->
  <!--
      @offset
      Value can be a float value which indicates how long the offset is.
      The offset shifts the robot's rotation-center towards an user who is
      standing at the right side of the robot.
  -->
  <arg name="offset" default="0"/>
  <!--
      @no_vibration
      Value can be 'true' or 'fasle' to switch tactile handle vibration.
      This variable is used for setting experiment variance.
  -->
  <arg name="no_vibration" default="false"/>
  <!--
      @output
      value can be 'log' or 'screen' to switch standard output
  -->
  <arg name="output" default="log"/>
  <!--
      @use_velodyne
      value can be 'true' or 'false' to switch laser range sensor.
      Velodyne VLP-16 or Hokuyo URG30
  -->
  <arg name="use_velodyne" default="true"/>
  <!--
      @use_tf_static
      value can be 'true' or 'false' to switch using tf_static
  -->
  <arg name="use_tf_static" default="true"/>
  <!--
      @enable_touch
      value can be 'true' or 'false' to switch using touch mode
  -->
  <arg name="enable_touch" default="false"/>
  <!--
      @touch_params
      change touch threshold parameters
  -->
  <arg name="touch_params" default="[90,30,15]"/>
  <arg name="calibration_params" default="[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]"/>


  
  <!-- INTERNAL VARIABLES -->
  <!-- robot name and type-->
  <arg name="robot" default="cabot2-gtm-outdoor"/>
  <param name="robot/name" value="$(optenv ROBOT CaBot2)"/>
  <param name="robot/type" value="$(arg robot)"/>
  <arg name="urdf_file"
       default="$(find xacro)/xacro --inorder
		'$(find cabot_description)/robots/$(arg robot).urdf.xacro'
		offset:=$(arg offset) sim:=false"/>
  
  <param name="robot_description" command="$(arg urdf_file)" />
  
  <!-- robot state publisher -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="5.0" />
    <param name="use_tf_static" type="boolean" value="$(arg use_tf_static)" />
  </node>

  <!-- duplicate tree for odom navigation -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher_local">
    <param name="publish_frequency" type="double" value="5.0" />
    <param name="use_tf_static" type="boolean" value="$(arg use_tf_static)" />
    <param name="prefix_tf_with" type="string" value="local/" />
  </node>
  

  <group if="$(arg use_velodyne)">
    <include file="$(find cabot)/launch/includes/vlp16.launch.xml">
    </include>
  </group>
  <group unless="$(arg use_velodyne)">
    <!-- Hokuyo laser node -->
    <node pkg="urg_node" type="urg_node" name="scan" ns="hokuyo">
      <param name="ip_address" value="192.168.0.10"/>
      <param name="frame_id" value="hokuyo_link" />
      <!-- the laser angle of the right side should be cut off to avoid detecting
	   user's foot as obstacle -->
      <param name="angle_min" value="-1.2"/>
      <!-- the left side depends on where the lidar is attached on -->
      <param name="angle_max" value="1.57"/>
    </node>
    <!--
	Laser filter to substitute outlier values to inf.
	This process is important to avoid obstacle clearing issue in costmap.
	Outlier values are ignored by costmap and obstacles (points) on the
	line of the sight cannot be cleared. Inf values are treated well if
	inf_is_valid is set to true.
	http://wiki.ros.org/costmap_2d/hydro/obstacles      
    -->
    <node pkg="laser_filters" type="scan_to_scan_filter_chain"
	  output="screen" name="laser_filter">
      <rosparam command="load" file="$(find cabot)/config/range_filter.yaml" />
      <remap from="/scan" to="/hokuyo/scan" />      
      <remap from="/scan_filtered" to="/scan" />      
    </node>
  </group>
  
  
  <!--
      CaBot2-gtm-outdoor specification
      1. Odrive motor controller (serial)
      2. Arduino Mega
      - IMU
      3. Haptic handle (v2, 4 buttons and 3 semi-fixed vibrators)
      - controlled by Arduino Nano compatible board (serial, recognized as ttyVIB1)
  -->
  <group ns="cabot">
    
    <!-- Haptic handle v2 -->
    <node pkg="cabot" type="cabot_handle_v2_node.py" name="cabot_handle_v2_node" output="screen">
      <param name="no_vibration" value="$(arg no_vibration)"/>
      <rosparam command="load" file="$(find cabot)/config/five_buttons.yaml" />
    </node>
    
    <!--
	Nodelet manager
	This nodelet deals with odometry and sensors of CaBot1
	- CaBot/SpeedVisualizeNodelet
	- CaBot/CaBotESensorNodelet
	- Safety/ClearingTFNodelet
	- Safety/OdomAdapterNodelet
	- Safety/LiDARSpeedControlNodelet
	- Safety/SpeedControlNodelet
	- MotorAdapter/ODriverNodelet
	- RobotLocalization/EkfNodelet
    -->
    <node pkg="nodelet" type="nodelet" output="$(arg output)" name="cabot_nodelet_manager"
	  args="manager"/>

    <!-- Visualize the current speed on Rviz-->
    <node pkg="nodelet" type="nodelet" output="$(arg output)" name="speed_visualize_nodelet"
	  args="load CaBot/SpeedVisualizeNodelet cabot_nodelet_manager">
      <param name="cmd_vel_topic" value="/cabot/cmd_vel"/>
      <param name="visualize_topic" value="/cabot/poi"/>
    </node>
    
    <!--
	Managing CaBot-E specific sensors
	Convert sensor topics
    -->
    <node pkg="nodelet" type="nodelet" output="$(arg output)" name="cabot_e_sensor"
	  args="load CaBot/CaBotESensorNodelet cabot_nodelet_manager">
      <param name="sensor_topic" type="string" value="/cabot/wrench" />
      <!-- not using
	   <param name="event_topic" type="string" value="/cabot/event" />
      -->
    </node>
    <node pkg="cabot" type="cabot_serial.py" name="rosserial" output="log">
      <param name="port" value="/dev/ttyARDUINO_MEGA"/>
      <param name="baud" value="115200"/>
      <param name="touch_params" type="yaml" value="$(arg touch_params)"/>
      <param name="calibration_params" type="yaml" value="$(arg calibration_params)"/>
      <param name="touch_speed_max_inactive" value="0.5"/>
      
      <remap from="/cabot/imu" to="/cabot/imu/data" />
      <remap from="/cabot/wrench" to="/cabot/wrench" />
      <remap from="/cabot/touch_speed" to="/cabot/touch_speed_raw" />
    </node>
    <!--
	Convert wrench topic to event (speed up/down, go left/right)
	TODO: left/right is not implemented
    -->
    <!--
	<node pkg="cabot_ui" type="cabot_force.py" name="cabot_force" output="screen">
	</node>
    -->
    <!--
	Costmap clearing issue hacking
	Some obstacle points in costmap can be laid between the line of sight of lasers.
	This requires the robot to move to clear those points. Usually this problem is
	dealed with the rotating recovery behavior[1] in default recovery behaviors,
	but this behavior is removed for CaBot because rotation is annoying for the user.
	[1] https://github.com/ros-planning/navigation/tree/kinetic-devel/rotate_recovery
	So, this nodelet randomly rotate the laser in range of a laser scan step
	(360/1440 degree) by changing hokuyo_link tf to remove obstacle points between
	two laser scans.
    -->
    <node pkg="nodelet" type="nodelet" output="$(arg output)" name="clearing_tf_nodelet"
	  args="load Safety/ClearingTFNodelet cabot_nodelet_manager">
      <param name="target_rate" value="20"/>
      <param name="target_frame" value="velodyne"/>
    </node>

    
    
    <!-- 
	The diagram of Cabot Odometry Adapter & related nodes (*nodelets)
	move_base's cmd_vel commands will be filtered through nodelets to transform
	command for the robot rotation center to the actual robot center.
	Motor status will be used for calculating raw odometry of the robot
	and will be merged by Robot Localization node to get stabilized
	odometry. Odom adapter will convert the raw odometry to the odometry
	of the robot rotating center which is controlled by offset.
	 
                                                      /cabot/cmd_vel_limited
+================+ /cmd_vel    +===================+              +===============+
|                |============>| * SpeedControl    |=============>| *             |
| Controller     |             +===================+              | OdomAdapter   |
|                |<===============================================|               |
+================+ /odom                                          +===============+
                                                                     A          |
                                                                     |          | /cabot/cmd_vel
                  /cabot/imu/data                                    |          |
+================+             +===================+  /cabot/odometry/filtered  |
|*Cabot Sensor   |============>| *                 |=================+          |
|================|             | RobotLocalization |                            |
                               |                   |<==================+        |
                               +===================+                   |        |
                                                       /cabot/odom_raw |        |
                                                                       |        |
                                                  /cabot/motorStatus   |        v
+================+             +==================+               +===============+
|                |============>|                  |==============>| *             |
| Motor          |   Serial    | MotorControl     |               | MotorAdapter  |
|                |<============|                  |<==============|               |
+================+             +==================+               +===============+
                                                  /cabot/motorTarget
    -->
    <node pkg="nodelet" type="nodelet" output="$(arg output)" name="odom_adapter_nodelet"
	  args="load Safety/OdomAdapterNodelet cabot_nodelet_manager">
      <param name="odom_input" value="/cabot/odometry/filtered"/>
      <param name="odom_output" value="/odom"/>
      <param name="odom_frame" value="odom"/>
      <param name="base_frame" value="base_footprint"/>
      <param name="offset_frame" value="base_control_shift"/>
      <param name="publish_tf" value="true"/>
      <param name="max_speed" value="$(optenv CABOT_MAX_SPEED 1.0)" />
      
      <param name="cmd_vel_input" value="/cabot/cmd_vel_limited"/>
      <param name="cmd_vel_output" value="/cabot/cmd_vel"/>
      
      <param name="target_rate" value="20"/>
    </node>

    <!-- for local odom navigation-->
    <node pkg="nodelet" type="nodelet" output="$(arg output)" name="odom_adapter_nodelet2"
	  args="load Safety/OdomAdapterNodelet cabot_nodelet_manager">
      <param name="odom_input" value="/cabot/odometry/filtered"/>
      <!-- do nothing with odom topic -->
      <param name="odom_output" value="/odom_"/>
      <!-- copy odom tf  -->
      <param name="odom_frame" value="local/odom"/>
      <param name="base_frame" value="local/base_footprint"/>
      <param name="offset_frame" value="local/base_footprint"/>
      <param name="publish_tf" value="true" />
      <param name="max_speed" value="1.0" />

      <!-- do nothing with cmd_vel -->
      <param name="cmd_vel_input" value="/cabot/cmd_vel_limited_"/>
      <param name="cmd_vel_output" value="/cabot/cmd_vel_"/>
      
      <param name="target_rate" value="20"/>
    </node>

    <!--  Cabot Lidar Speed Control -->
    <node pkg="nodelet" type="nodelet" output="$(arg output)" name="cabot_e_lidar_speed"
    args="load Safety/LiDARSpeedControlNodelet cabot_nodelet_manager">
      <param name="laser_topic" type="string" value="/scan" />
      <param name="visualize_topic" type="string" value="visualize" />
      <param name="limit_topic" type="string" value="/cabot/lidar_speed" />
      <!-- ToDo(daisueks): make this true once bug is fixed -->
      <param name="check_front_obstacle" type="bool" value="false" />
    </node>

    <!-- Cabot People SPeed Control -->
    <node pkg="nodelet" type="nodelet" output="$(arg output)" name="cabot_e_people_speed"
	  args="load Safety/PeopleSpeedControlNodelet cabot_nodelet_manager">
      <param name="people_topic" type="string" value="/people" />
      <param name="visualize_topic" type="string" value="/visualize" />
      <param name="limit_topic" type="string" value="/cabot/people_speed" />
      <param name="odom_topic" type="string" value="/odom" />
      <param name="plan_topic" type="string" value="/plan" />
      <!--
        Social Distancing setting 
	X (front): 2.0 + person radius (0.35), not including robot radius because person is usually following the robot a step behind
        Y (side) : 1.0 + 0.35
        Consider an oval radius (x, y)
      -->
      <param name="social_distance_x" value="2.0" />
      <param name="social_distance_y" value="0.5" />
    </node>

    <!--  Cabot TF Speed Control -->
    <node pkg="nodelet" type="nodelet" output="$(arg output)" name="cabot_e_tf_speed"
    args="load Safety/TFSpeedControlNodelet cabot_nodelet_manager">
      <param name="limit_topic" type="string" value="/cabot/tf_speed" />
    </node>
    
    <!--
	Cabot Speed Control
	This node limit the speed from the move_base based on specified topics
	  /cabot/lidar_speed           - control by lidar sensor
	  /cabot/map_speed             - control by map speed poi
	  /cabot/people_speed          - control by surrounding people
	  /cabot/queue_speed           - control by queue
	  /cabot/tf_speed              - control by existence of specific tf
	  /cabot/touch_speed_switched  - control by touch sensor
	  /cabot/user_speed            - control by user
    -->
    <node pkg="nodelet" type="nodelet" output="$(arg output)" name="speed_control_nodelet"
	  args="load Safety/SpeedControlNodelet cabot_nodelet_manager">
      <param name="cmd_vel_input" type="string" value="/cmd_vel" />
      <param name="cmd_vel_output" type="string" value="/cabot/cmd_vel_limited" />

      <param name="speed_input" type="yaml"
       value="[/cabot/user_speed, /cabot/lidar_speed, /cabot/people_speed, /cabot/tf_speed, /cabot/queue_speed, /cabot/map_speed, /cabot/touch_speed_switched]" if="$(arg enable_touch)"/>
      <param name="speed_input" type="yaml"
       value="[/cabot/user_speed, /cabot/lidar_speed, /cabot/people_speed, /cabot/tf_speed, /cabot/queue_speed, /cabot/map_speed]" unless="$(arg enable_touch)"/>
      <param name="speed_limit" type="yaml" value="[2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]"/>
      <param name="speed_timeout" type="yaml" value="[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.5]"/>
      <param name="complete_stop" type="yaml" value="[false,false,false,false,true,false,true]"/>
      <param name="configurable" type="yaml" value="[true,false,false,false,false,false,false]"/>
    </node>
    
    <!--
	Cabot-E Motor Controller Adapter
	Convert cmd_vel (linear, rotate) speed to motor target (left, right) speed.
    -->
    <node pkg="nodelet" type="nodelet" output="$(arg output)" name="odriver_adapter_node"
	  args="load MotorAdapter/ODriverNodelet cabot_nodelet_manager">
      <param name="encoder_topic" type="string" value="/cabot/motorStatus" />
      <param name="odom_topic" type="string" value="/cabot/odom_raw" />

      <param name="motor_topic" type="string" value="/cabot/motorTarget" />
      <param name="cmd_vel_topic" type="string" value="/cabot/cmd_vel" />

      <param name="max_acc" value="1.2"/>
      <param name="target_rate" value="20"/>
      <param name="bias" value="0.26"/> <!--wheel separation-->

      <param name="gain_omega" value="1.0"/>
      <param name="gain_omega_i" value="0.0"/>
      <remap from="/imu" to="/cabot/imu/data"/>
    </node>

    <!--
	Cabot-E Motor Controller (ODrive)
    -->
    <node pkg="odriver" type="odriver_node.py" name="odriver_node" output="log">
      <param name="wheel_diameter" value="0.200" />
      <param name="count_per_round" value="90" />
      <param name="left_is_1" value="false" />
      <param name="is_clockwise" value="false" />
      <param name="gain_left" value="1.0" />
      <param name="gain_right" value="1.0" />
      <param name="port" value="/dev/ttyODRIVE" />

      <param name="vel_gain" value="6.0" />
      <param name="vel_integrator_gain" value="10.0" />
      <param name="motor_bandwidth" value="100" />
      <param name="encoder_bandwidth" value="100" />

      <remap from="/motorTarget" to="/cabot/motorTarget" />
      <remap from="/motorStatus" to="/cabot/motorStatus" />
    </node>
    

    <!-- Sensor fusion for stabilizing odometry-->    
    <node pkg="nodelet" type="nodelet" output="$(arg output)" name="ekf_nodelet"
	  args="load RobotLocalization/EkfNodelet cabot_nodelet_manager">
      <param name="frequency" value="100"/>
      <param name="sensor_timeout" value="0.1"/>
      <param name="two_d_mode" value="true"/>

      <param name="odom_frame" value="odom"/>
      <param name="base_link_frame" value="base_footprint"/>
      <param name="world_frame" value="odom"/>

      <rosparam param="initial_state" subst_value="true">[0.0, 0.0, 0.0,
      0.0,  0.0,  0.0,
      0.0,  0.0,  0.0,
      0.0,  0.0,  0.0,
      0.0,  0.0,  0.0]</rosparam>

      <!-- Wheel odometry -->
      <param name="odom0" value="/cabot/odom_raw"/>
      <rosparam param="odom0_config">[true,  true,  false,
      false, false, false,
      false, false, false,
      false, false, false,
      false, false, false]</rosparam>
      <param name="odom0_queue_size" value="100"/>
      <param name="odom0_differential" value="true"/>

      <!-- IMU -->
      <param name="imu0" value="/cabot/imu/data"/>
      <rosparam param="imu0_config">[false, false, false,
      true, true,  true,
      false, false, false,
      true, true, true,
      false, false, false]</rosparam>
      <param name="imu0_queue_size" value="100"/>
      <param name="imu0_differential" value="false"/>
      <param name="imu0_relative" value="true"/>

      <param name="imu0_remove_gravitational_acceleration" value="true"/>

      <param name="print_diagnostics" value="true"/>
      <param name="publish_tf" value="false"/>
    </node>

  </group>
</launch>
