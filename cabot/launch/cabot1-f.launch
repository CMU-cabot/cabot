<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2020  Carnegie Mellon University
 
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
 
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
 
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. -->

<launch>
  <!--
      Launch file for CaBot1-f (fixed)
      Motor controller is changed from the original one which is integrated in the PCB board
  -->
  <!-- EXTERNAL VARIABLES -->
  <!--
      @offset
      Value can be a float value which indicates how long the offset is.
      The offset shifts the robot's rotation-center towards an user who is
      standing at the right side of the robot.
  -->
  <arg name="offset" default="0"/>
  <!--
      @no_vibration
      Value can be 'true' or 'fasle' to switch tactile handle vibration.
      This variable is used for setting experiment variance.
  -->
  <arg name="no_vibration" default="false"/>
  <!--
      @output
      value can be 'log' or 'screen' to switch standard output
  -->
  <arg name="output" default="log"/>


  <!-- INTERNAL VARIABLES -->
  <!-- robot name and type-->
  <arg name="robot" default="cabot1-f"/>
  <param name="robot/name" value="$(optenv ROBOT CaBot1)"/>
  <param name="robot/type" value="$(arg robot)"/>
  <!-- load robot description -->
  <arg name="urdf_file"
       default="$(find xacro)/xacro --inorder
		'$(find cabot_description)/robots/$(arg robot).urdf.xacro'
		offset:=$(arg offset)" />
  <!-- robot state publisher -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="robot_description" command="$(arg urdf_file)" />
    <param name="publish_frequency" type="double" value="5.0" />
  </node>
  <!-- needs to update for cabot
       <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator" >
       <rosparam command="load" file="$(find turtlebot_bringup)/param/kobuki/diagnostics.yaml" />
       </node>
  -->
  
  <!-- Hokuyo laser node -->
  <node pkg="urg_node" type="urg_node" name="scan" ns="hokuyo">
    <param name="ip_address" value="192.168.0.10"/>
    <param name="frame_id" value="hokuyo_link" />
    <!-- the laser angle of the right side should be cut off to avoid detecting
	 user's foot as obstacle -->
    <param name="angle_min" value="-1.22"/>
    <!-- the left side depends on where the lidar is attached on -->
    <param name="angle_max" value="1.57"/>
  </node>
  
  <!--
      Laser filter to substitute outlier values to inf.
      This process is important to avoid obstacle clearing issue in costmap.
      Outlier values are ignored by costmap and obstacles (points) on the
      line of the sight cannot be cleared. Inf values are treated well if
      inf_is_valid is set to true.
      http://wiki.ros.org/costmap_2d/hydro/obstacles      
  -->
  <node pkg="laser_filters" type="scan_to_scan_filter_chain"
	output="screen" name="laser_filter">
    <rosparam command="load" file="$(find cabot)/config/range_filter.yaml" />
    <remap from="/scan" to="/hokuyo/scan" />      
    <remap from="/scan_filtered" to="/scan" />      
  </node>

  <!--
      CaBot1 specification
      1. Customized PCB board (serial, recognized as ttyCABOT)
      - IMU
      - Haptic handle (v1, 3 buttons and 4 fixed vibrators, not usedn)
      - Cluthces (on/off)
      - Motors   (was broken and substitute with a roboclaw controller)
      - Fans     (on/off switch)
      2. Roboclaw motor controller (serial)
      3. Haptic handle (v2, 2 buttons and 3 semi-fixed vibrators)
      - controlled by Arduino Nano compatible board (serial, recognized as ttyVIB1)
  -->
  <group ns="cabot">
    <!-- The customized PCB board -->
    <node pkg="cabot" type="cabot_serial.py" name="rosserial" output="screen">
      <param name="port" value="/dev/ttyCABOT"/>
      <param name="baud" value="1000000"/>
    </node>

    <!-- Haptic handle v1, not using, can be omitted-->
    <node pkg="cabot" type="cabot_handle_v1_node.py" name="cabot_handle_v1_node" output="screen">
    </node>

    <!-- Haptic handle v2 -->
    <node pkg="cabot" type="cabot_serial.py" name="rosserial2" output="screen">
      <param name="port" value="/dev/ttyVIB1"/>
      <param name="baud" value="57600"/>
    </node>
    <node pkg="cabot" type="cabot_handle_v2_node.py" name="cabot_handle_v2_node" output="screen">
      <param name="no_vibration" value="$(arg no_vibration)"/>
    </node>

    <!--
	Nodelet manager
	This nodelet deals with odometry and sensors of CaBot1
	- CaBot/SpeedVisualizeNodelet
	- CaBot/CaBotFSensorNodelet
	- Safety/ClearingTFNodelet
	- Safety/OdomAdapterNodelet
	- Safety/SpeedControlNodelet
	- Safety/ClutchControlNodelet
	- MotorAdapter/RoboClawNodelet
	- RobotLocalization/EkfNodelet
    -->
    <node pkg="nodelet" type="nodelet" output="$(arg output)" name="cabot_nodelet_manager"
	  args="manager"/>

    <!-- Visualize the current speed on Rviz-->
    <node pkg="nodelet" type="nodelet" output="$(arg output)" name="speed_visualize_nodelet"
	  args="load CaBot/SpeedVisualizeNodelet cabot_nodelet_manager">
      <param name="cmd_vel_topic" value="/cabot/cmd_vel"/>
      <param name="visualize_topic" value="/cabot/poi"/>
    </node>
    
    <!--
	Managing CaBot-F specific sensors
	IMU topic from the board needs to be fixed
    -->
    <node pkg="nodelet" type="nodelet" output="$(arg output)" name="cabot_f_sensor_nodelet"
	  args="load CaBot/CaBotFSensorNodelet cabot_nodelet_manager">
      <param name="imu_input" value="/cabot/imu"/>
      <param name="imu_output" value="/cabot/imu_fixed"/>
      <param name="clutch_topic" value="/cabot/clutch"/>
    </node>

    <!--
	Costmap clearing issue hacking
	Some obstacle points in costmap can be laid between the line of sight of lasers.
	This requires the robot to move to clear those points. Usually this problem is
	dealed with the rotating recovery behavior[1] in default recovery behaviors,
	but this behavior is removed for CaBot because rotation is annoying for the user.
	[1] https://github.com/ros-planning/navigation/tree/kinetic-devel/rotate_recovery
	So, this nodelet randomly rotate the laser in range of a laser scan step
	(360/1440 degree) by changing hokuyo_link tf to remove obstacle points between
	two laser scans.
    -->
    <node pkg="nodelet" type="nodelet" output="$(arg output)" name="clearing_tf_nodelet"
	  args="load Safety/ClearingTFNodelet cabot_nodelet_manager">
      <param name="target_rate" value="20"/>
    </node>

    <!-- 
	The diagram of Cabot Odometry Adapter & related nodes (*nodelets)
	move_base's cmd_vel commands will be filtered through nodelets to transform
	command for the robot rotation center to the actual robot center.
	Motor status will be used for calculating raw odometry of the robot
	and will be merged by Robot Localization node to get stabilized
	odometry. Odom adapter will convert the raw odometry to the odometry
	of the robot rotating center which is controlled by offset.
	 
                                                      cmd_vel_adapter
+================+ raw_cmd_vel +===================+              +===============+
|                |============>| *                 |=============>| *             |
| move_base      |             | OdomAdapter       |              | SpeedControl  |
|                |<============|                   |              |               |
+================+ odom        +===================+              +===============+
                                   ^                                          |
                                   | odom_filtered                            | cmd_vel_limit
                                   |                                          v
+================+    imu      +===================+               +===============+
|*Cabot Sensor   |============>| *                 |               | *             |
|================|             | RobotLocalization |               | ClutchControl |
| Hector Mapping |============>|                   |<==============|               |
+================+ odom_hector +===================+  odom_clutch  +===============+
                                                                       ^       |
                                                              odom_raw |       | cmd_vel
                                                                       |       v
+================+             +==================+  motorStatus  +===============+
|                |============>|                  |==============>| *             |
| Motor          |   Serial    | MotorControl     |               | MotorAdapter  |
|                |<============|                  |<==============|               |
+================+             +==================+  motorTarget  +===============+

    -->
    <node pkg="nodelet" type="nodelet" output="$(arg output)" name="odom_adapter_nodelet"
	  args="load Safety/OdomAdapterNodelet cabot_nodelet_manager">
      <param name="offset" value="$(arg offset)"/>
      <param name="odom_input" value="/cabot/odometry/filtered"/>
      <param name="odom_output" value="/cabot/odom"/>
      <param name="odom_frame" value="odom"/>
      <param name="base_frame" value="base_footprint"/>

      <param name="cmd_vel_input" value="/cabot/raw_cmd_vel"/>
      <param name="cmd_vel_output" value="/cabot/cmd_vel_adapter"/>
      
      <param name="offset" value="$(arg offset)"/>
      <param name="target_rate" value="20"/>
      <param name="bias" value="0.165"/>
    </node>

    <!--
	Cabot Speed Control
	This node limit the speed from the move_base based on the user preference (user_speed)
	and environmental constraint (map_speed)
    -->
    <node pkg="nodelet" type="nodelet" output="$(arg output)" name="speed_control_nodelet"
	  args="load Safety/SpeedControlNodelet cabot_nodelet_manager">
      <param name="cmd_vel_input" type="string" value="/cabot/cmd_vel_adapter" />
      <param name="cmd_vel_output" type="string" value="/cabot/cmd_vel_limit" />
      
      <param name="user_speed_input" value="/cabot/user_speed"/>
      <param name="map_speed_input" value="/cabot/map_speed"/>
    </node>

    <!--
	Cabot Clutch Control
	If the clutch is off, cmd_vel and odom will be stopped even if the motors are moved.
    -->
    <node pkg="nodelet" type="nodelet" output="$(arg output)" name="clutch_control_nodelet"
	  args="load Safety/ClutchControlNodelet cabot_nodelet_manager">
      <param name="cmd_vel_input" type="string" value="/cabot/cmd_vel_limit" />
      <param name="cmd_vel_output" type="string" value="/cabot/cmd_vel" />
      <param name="odom_input" type="string" value="/cabot/odom_raw" />
      <param name="odom_output" type="string" value="/cabot/odom_clutch" />
      <param name="clutch_topic" type="string" value="/cabot/clutch" />
    </node>
    
    <!--
	Cabot-F Motor Controller Adapter
	Convert cmd_vel (linear, rotate) speed to motor target (left, right) speed.
    -->
    <node pkg="nodelet" type="nodelet" output="$(arg output)" name="roboclaw_adapter_node"
	  args="load MotorAdapter/RoboClawNodelet cabot_nodelet_manager">
      <param name="encoder_topic" type="string" value="/cabot/motorStatus" />
      <param name="odom_topic" type="string" value="/cabot/odom_raw" />
      
      <param name="motor_topic" type="string" value="/cabot/motorTarget" />
      <param name="cmd_vel_topic" type="string" value="/cabot/cmd_vel" />

      <param name="max_acc" value="0.6"/>
      <param name="target_rate" value="20"/>
      <param name="bias" value="0.165"/>
      <param name="wheel_diameter" value="0.09"/>
      <param name="count_per_rotate" value="52000" /> <!-- 26*2000 -->
    </node>

    <!--
	Cabot-F Motor Controller (RoboClaw)
    -->
    <node pkg="roboclaw" type="roboclaw_node.py" name="roboclaw_node" output="$(arg output)">
      <remap from="/motorTarget" to="/cabot/motorTarget" />
      <remap from="/motorStatus" to="/cabot/motorStatus" />
    </node>
    
    
    <!-- Sensor fusion for stabilizing odometry-->    
    <node pkg="nodelet" type="nodelet" output="$(arg output)" name="ekf_nodelet"
	  args="load RobotLocalization/EkfNodelet cabot_nodelet_manager">
      <param name="frequency" value="100"/>  
      <param name="sensor_timeout" value="0.1"/>  
      <param name="two_d_mode" value="true"/>
      
      <param name="odom_frame" value="odom"/>
      <param name="base_link_frame" value="base_footprint"/>
      <param name="world_frame" value="odom"/>

      <rosparam param="initial_state" subst_value="true">[0.0,  0.0,  0.0,
      0.0,  0.0,  0.0,
      0.0,  0.0,  0.0,
      0.0,  0.0,  0.0,
      0.0,  0.0,  0.0]</rosparam>
      
      <!-- Wheel odometry -->
      <param name="odom0" value="/cabot/odom_clutch"/>
      <rosparam param="odom0_config">[true,  true,  false, 
      false, false, false, 
      false, false, false, 
      false, false, false,
      false, false, false]</rosparam>
      <param name="odom0_queue_size" value="100"/>
      <param name="odom0_differential" value="true"/>

      <!-- Lidar odometry -->
      <param name="odom1" value="/cabot/odom_hector"/>
      <rosparam param="odom1_config">[true,  true,  false, 
      false, false, false, 
      false, false, false, 
      false, false, false,
      false, false, false]</rosparam>
      <param name="odom1_queue_size" value="100"/>
      <param name="odom1_differential" value="true"/>
      
      <!-- IMU -->
      <param name="imu0" value="/cabot/imu_fixed"/> 
      <rosparam param="imu0_config">[false, false, false, 
      true,  true,  true, 
      false, false, false, 
      true,  true,  true,
      false, false, false]</rosparam>
      <param name="imu0_queue_size" value="100"/>
      <param name="imu0_differential" value="false"/>
      <param name="imu0_relative" value="true"/>
      
      <param name="imu0_remove_gravitational_acceleration" value="true"/>

      <param name="print_diagnostics" value="true"/>
      <param name="publish_tf" value="false"/> 
    </node>

    <!-- Odomerty during clutches off -->
    <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="$(arg output)">
      
      <!-- avoid conflict with map server for amcl -->
      <param name="pub_odometry" value="true" />
      
      <!-- Frame names -->
      <param name="map_size" value="8192" />
      <param name="base_frame" value="base_link" />
      <param name="odom_frame" value="odom" />
      <param name="map_frame" value="map" />
      
      <!-- Tf use -->
      <param name="use_tf_scan_transformation" value="true"/>
      <param name="use_tf_pose_start_estimate" value="false"/>
      <param name="pub_map_odom_transform" value="false"/>
      <param name="pub_map_scanmatch_transform" value="false"/>
      
      <!-- Map size / start point -->
      <param name="map_resolution" value="0.050"/>
      <param name="map_start_x" value="0.5"/>
      <param name="map_start_y" value="0.5" />
      <param name="map_multi_res_levels" value="2" />
      
      <!-- Map update parameters -->
      <param name="update_factor_free" value="0.4"/>
      <param name="update_factor_occupied" value="0.9" />    
      <param name="map_update_distance_thresh" value="0.4"/>
      <param name="map_update_angle_thresh" value="0.9" />
      <param name="laser_z_min_value" value = "-1.0" />
      <param name="laser_z_max_value" value = "1.0" />
      <param name="laser_max_dist" value="20.0" />
      
      <!-- Advertising config --> 
      <param name="advertise_map_service" value="false"/>
      
      <param name="scan_subscriber_queue_size" value="20"/>
      <param name="scan_topic" value="/scan"/>
      
      <!-- Debug parameters -->
      <!--
	  <param name="output_timing" value="false"/>
	  <param name="pub_drawings" value="true"/>
	  <param name="pub_debug_output" value="true"/>
      -->

      <remap from="/cabot/scanmatch_odom" to="/cabot/odom_hector"/>
    </node>

  </group>  
  
</launch>
